import java.lang.Double
import java.math.Math
import java.util.TimeZone
import java.util.GregorianCalendar
import java.util.Calendar
import java.util.Date


/*
rule se4ACPowerConsumption_xyzxx
when Item se4ACPowerConsumption changed
then
  sendTelegram("bot1", "Verbrauch: %sW", se4ACPowerConsumption.state.toString)
end
*/

rule "Send telegram with Temp"
when
   Item ESP8266Temperature2 changed
then
   logWarn("TG", "1")   
   var calendar = new GregorianCalendar(TimeZone.getTimeZone("Europe/Berlin"))
   var hour = calendar.get(Calendar.HOUR_OF_DAY)
   var temp = ( ESP8266Temperature2.state as Number).doubleValue
   var diff = 1
   logWarn("TG", "2")
   if (TLastTemp.state != NULL){
     logWarn("TG", "3")
     diff = Math.abs(diff - ( TLastTemp.state as Number).doubleValue)
   }
   logWarn("TG", "4")
   logWarn("TG", "diff: {}  / hour {}", diff, hour)
   if(hour>=7 && hour<=21)
   {
     logWarn("TG", "4.1")
     if(diff>0.499) 
     {
       logWarn("TG", "5")
       sendTelegram("bot1", "Температура: %sC°", ESP8266Temperature2.state.toString)
       logWarn("TG", "5.1")
       postUpdate(TLastTemp, temp)
       logWarn("TG", "5.2")
     }
   }
   logWarn("TG", "6")
end

rule "Send battery level"
when
  Item ESP8266AccuLoadState changed
then
  //logWarn("TG", "accu load state changed...")
  if (TLastAccuState.state==NULL)
  { 
    postUpdate(TLastAccuState, 1)
  }
  else
  {
    var diff = (ESP8266AccuLoadState.state as Number) - (TLastAccuState.state as Number)
    //logWarn("TG", "accu diff: {} ", diff)
    diff = Math.abs(diff.longValue)
    //logWarn("TG", "accu abs diff: {} ", diff)
    if (diff>1)
    {
      sendTelegram("bot1", "Battery level: %s%%", ESP8266AccuLoadState.state.toString)
      postUpdate(TLastAccuState, ESP8266AccuLoadState.state)
    }
  }
end

rule "se4HeatSinkTemp"
when
  Item se4HeatSinkTemp changed
then
   if (TSLastTelegram2.state==NULL){
     postUpdate(TSLastTelegram2, 1)
   }else{
     var lastUpdate = (TSLastTelegram2.state as Number).longValue
     var nextUpdate = lastUpdate + (1 * 60*60 * 1000)
     var currentTS  = new Date().getTime()
     var shouldUpdate = (nextUpdate<=currentTS)
     if (shouldUpdate){
       var Integer tempValue = 0
       if (se4HeatSinkTemp.state != NULL) tempValue = (se4HeatSinkTemp.state as Number).intValue
       sendTelegram("bot1", "Inverter heat sink temp: "+ tempValue + ", status: "+se4InverterState_int.state) 
       postUpdate(TSLastTelegram2, currentTS)
      
     }
  }
end


rule "Send telegram gas"
  when Item ESP8266_GAS_ZHLR_IMPULSE received update
then
   logWarn("GZ", "42")

   var Double newCounterState = 0.1
   if (GasZaehler.state!=NULL) newCounterState = newCounterState + (GasZaehler.state as Number).doubleValue
   postUpdate(GasZaehler, newCounterState) 
end

rule "Send telegram Waschen!"
when
   Item se4ACPowerExport changed 
then
   if (TSLastTelegram.state==NULL){
     postUpdate(TSLastTelegram, 1)
   }else{
     var lastUpdate = (TSLastTelegram.state as Number).longValue
     var nextUpdate = lastUpdate + (1 * 60*60 * 1000)
     var currentTS  = new Date().getTime()
     var shouldUpdate = (nextUpdate<=currentTS)
     if (shouldUpdate){
       var Double exportValue = 0.0
       if (se4ACPowerExport.state != NULL) exportValue = (se4ACPowerExport.state as Number).doubleValue
       if (exportValue > 1000){
         sendTelegram("bot1", "Здрасти. Кажись соседи стирают нашим электричеством! :)")
         postUpdate(TSLastTelegram, currentTS)
       }
     }
  }
end


